generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid()) @db.Uuid
  email            String           @unique
  password         String
  role             UserRole         @default(FREELANCER)
  firstName        String
  lastName         String
  company          String?
  hourlyRate       Decimal?         @db.Decimal(10, 2)
  avatar           String?
  isActive         Boolean          @default(true)
  deletedAt        DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  clients          Client[]
  expenses         Expense[]
  invoices         Invoice[]
  assignedRequests ProjectRequest[] @relation("AssignedRequests")
  projects         Project[]        @relation("ProjectOwner")
  timeEntries      TimeEntry[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Client {
  id              String           @id @default(uuid()) @db.Uuid
  company         String
  contactPerson   String
  email           String           @unique
  password        String?
  phone           String?
  address         String?
  city            String?
  country         String?          @default("Hrvatska")
  oib             String?          @unique
  notes           String?
  isActive        Boolean          @default(true)
  canLogin        Boolean          @default(false)
  deletedAt       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  status          ClientStatus     @default(ACTIVE)
  userId          String?          @db.Uuid
  user            User?            @relation(fields: [userId], references: [id])
  invoices        Invoice[]
  projectRequests ProjectRequest[]
  projects        Project[]
  proposals       Proposal[]
  retainers       Retainer[]

  @@index([userId])
  @@index([email])
  @@index([oib])
  @@index([company])
  @@index([status])
  @@index([canLogin])
  @@map("clients")
}

model Service {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  defaultRate   Decimal        @db.Decimal(10, 2)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  invoiceItems  InvoiceItem[]
  proposalItems ProposalItem[]

  @@index([name])
  @@map("services")
}

model Project {
  id             String          @id @default(uuid()) @db.Uuid
  clientId       String          @db.Uuid
  ownerId        String          @db.Uuid
  name           String
  status         ProjectStatus   @default(PLANNING)
  startDate      DateTime?
  endDate        DateTime?
  budget         Decimal?        @db.Decimal(10, 2)
  estimatedHours Decimal?        @db.Decimal(8, 2)
  description    String?
  isActive       Boolean         @default(true)
  deletedAt      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  priority       ProjectPriority @default(MEDIUM)
  expenses       Expense[]
  invoices       Invoice[]
  client         Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  owner          User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  proposals      Proposal[]
  tasks          Task[]

  @@index([clientId])
  @@index([ownerId])
  @@index([status])
  @@index([priority])
  @@index([startDate])
  @@map("projects")
}

model Task {
  id             String       @id @default(uuid()) @db.Uuid
  projectId      String       @db.Uuid
  title          String
  description    String?
  status         TaskStatus   @default(TODO)
  priority       TaskPriority @default(MEDIUM)
  position       Int          @default(0)
  dueDate        DateTime?
  estimatedHours Decimal?     @db.Decimal(5, 2)
  isActive       Boolean      @default(true)
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries    TimeEntry[]

  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([position])
  @@map("tasks")
}

model TimeEntry {
  id          String    @id @default(uuid()) @db.Uuid
  taskId      String    @db.Uuid
  userId      String    @db.Uuid
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  description String?
  billable    Boolean   @default(true)
  approved    Boolean   @default(false)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([startTime])
  @@index([billable])
  @@map("time_entries")
}

model Expense {
  id          String    @id @default(uuid()) @db.Uuid
  projectId   String    @db.Uuid
  userId      String    @db.Uuid
  date        DateTime
  amount      Decimal   @db.Decimal(10, 2)
  category    String
  description String
  receipt     String?
  billable    Boolean   @default(true)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([date])
  @@index([category])
  @@index([billable])
  @@map("expenses")
}

model Invoice {
  id        String        @id @default(uuid()) @db.Uuid
  clientId  String        @db.Uuid
  userId    String        @db.Uuid
  projectId String?       @db.Uuid
  number    String        @unique
  date      DateTime
  dueDate   DateTime
  status    InvoiceStatus @default(DRAFT)
  subtotal  Decimal       @default(0) @db.Decimal(10, 2)
  tax       Decimal       @default(0) @db.Decimal(10, 2)
  total     Decimal       @default(0) @db.Decimal(10, 2)
  notes     String?
  deletedAt DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  items     InvoiceItem[]
  client    Client        @relation(fields: [clientId], references: [id])
  project   Project?      @relation(fields: [projectId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([projectId])
  @@index([number])
  @@index([date])
  @@index([status])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(uuid()) @db.Uuid
  invoiceId   String   @db.Uuid
  serviceId   String?  @db.Uuid
  description String
  quantity    Decimal  @default(1) @db.Decimal(10, 3)
  rate        Decimal  @db.Decimal(10, 2)
  amount      Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service     Service? @relation(fields: [serviceId], references: [id])

  @@index([invoiceId])
  @@index([serviceId])
  @@map("invoice_items")
}

model Proposal {
  id         String         @id @default(uuid()) @db.Uuid
  clientId   String         @db.Uuid
  projectId  String?        @db.Uuid
  title      String
  validUntil DateTime
  status     ProposalStatus @default(DRAFT)
  subtotal   Decimal        @default(0) @db.Decimal(10, 2)
  tax        Decimal        @default(0) @db.Decimal(10, 2)
  total      Decimal        @default(0) @db.Decimal(10, 2)
  notes      String?
  acceptedAt DateTime?
  deletedAt  DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  items      ProposalItem[]
  client     Client         @relation(fields: [clientId], references: [id])
  project    Project?       @relation(fields: [projectId], references: [id])

  @@index([clientId])
  @@index([projectId])
  @@index([status])
  @@index([validUntil])
  @@map("proposals")
}

model ProposalItem {
  id          String   @id @default(uuid()) @db.Uuid
  proposalId  String   @db.Uuid
  serviceId   String?  @db.Uuid
  description String
  quantity    Decimal  @default(1) @db.Decimal(10, 3)
  rate        Decimal  @db.Decimal(10, 2)
  amount      Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  service     Service? @relation(fields: [serviceId], references: [id])

  @@index([proposalId])
  @@index([serviceId])
  @@map("proposal_items")
}

model Retainer {
  id           String    @id @default(uuid()) @db.Uuid
  clientId     String    @db.Uuid
  monthlyHours Decimal   @db.Decimal(5, 2)
  rate         Decimal   @db.Decimal(10, 2)
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean   @default(true)
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  client       Client    @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@index([startDate])
  @@index([endDate])
  @@map("retainers")
}

model ProjectRequest {
  id                 String               @id @default(uuid()) @db.Uuid
  title              String
  description        String
  budgetRange        String?
  deadline           DateTime?
  priority           ProjectPriority      @default(MEDIUM)
  status             ProjectRequestStatus @default(PENDING)
  clientMessage      String?
  freelancerResponse String?
  estimatedHours     Decimal?             @db.Decimal(8, 2)
  quotedAmount       Decimal?             @db.Decimal(10, 2)
  projectId          String?              @db.Uuid
  clientId           String               @db.Uuid
  assignedTo         String?              @db.Uuid
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  assignedFreelancer User?                @relation("AssignedRequests", fields: [assignedTo], references: [id])
  client             Client               @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@index([assignedTo])
  @@index([status])
  @@index([priority])
  @@map("project_requests")
}

enum UserRole {
  FREELANCER
  CLIENT
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

enum ProposalStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ProjectRequestStatus {
  PENDING
  ASSIGNED
  QUOTED
  ACCEPTED
  REJECTED
  COMPLETED
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}
